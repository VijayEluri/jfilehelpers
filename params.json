{"name":"Jfilehelpers","tagline":"JFileHelpers is a library that automates the tedious task of parsing and creating structured text files.","body":"What is JFileHelpers?\r\n---------------------\r\n\r\nChances are every programmer will end up having to manipulate structured text files at any point in his career. Those files are called flat files and, until now, you had to go through that same boring script to work with them. You had to open the file, create a reader, then start reading and parsing line by line. No more.\r\n\r\nJFileHelpers is a library that automates the tedious task of parsing and creating structured text files. It handles fixed width or delimited files with Java annotations sweetness.\r\n\r\nJFileHelpers started as a port of the awesome Marcos Meli's FileHelpers but it's starting to take its own path and we are in need of passinate developers who would like to give us a hand.\r\n\r\nGo ahead and try it out!\r\n\r\nThe latest binary release can always be found on the [Releases](https://github.com/fcoury/jfilehelpers/releases) area.\r\n\r\n## So what's code like? ##\r\n\r\nLet's take, for instance, a fixed length structured text file, that handles customer data (you can see the ever-growing list of examples as well).\r\n\r\nHere's how our bean should be:\r\n\r\n```java\r\n@FixedLengthRecord()\r\npublic class Customer {\r\n    @FieldFixedLength(4)\r\n    public Integer custId;\r\n\r\n    @FieldAlign(alignMode=AlignMode.Right)\r\n    @FieldFixedLength(20)\r\n    public String name;\r\n\r\n    @FieldFixedLength(3)\r\n    public Integer rating;\r\n\r\n    @FieldTrim(trimMode=TrimMode.Right)\r\n    @FieldFixedLength(10)\r\n    @FieldConverter(converter = ConverterKind.Date,\r\n        format = \"dd-MM-yyyy\")\r\n    public Date addedDate;\r\n\r\n    @FieldFixedLength(3)\r\n    @FieldOptional\r\n    public String stockSimbol;\r\n}\r\n```\r\n\r\nThis could would handle a text file structured like this:\r\n\r\n```\r\n....|....1....|....2....|....3....|....4\r\n1   Antonio Pereira     10012-12-1978ABC\r\n2   Felipe Coury          201-01-2007\r\n3   Anderson Polga       4212-11-2007DEF\r\n```\r\n\r\nAnd reading that file is as easy as:\r\n\r\n```java\r\n  FileHelperEngine<Customer> engine =\r\n      new FileHelperEngine<Customer>(Customer.class);\r\n  List<Customer> customers =\r\n      new ArrayList<Customer>();\r\n\r\n  customers = engine.readResource(\r\n      \"/samples/customers-fixed.txt\");\r\n```\r\n\r\nThis way, you can manipulate any properties of the beans contained on the ArrayList collection and eventually, even recreate a file with same format, also as easy as:\r\n\r\n```java\r\nFileHelperEngine<Customer> engine =\r\n    new FileHelperEngine<Customer>(Customer.class);\r\nList<Customer> customers = new ArrayList<Customer>();\r\n\r\ncustomers = engine.readResource(\r\n    \"/samples/customers-fixed.txt\");\r\n\r\n// retrieves customer 3 - Anderson Polga\r\nCustomer c = customers.get(2);\r\n// changes a couple of properties\r\nc.rating = 82;\r\nc.stockSimbol = \"APR\";\r\n\r\n// and removes first customer - Antonio Pereira\r\ncustomers.remove(0);\r\n\r\n// writes the output file\r\nengine.writeFile(\"customers-fixed-out.txt\", customers);\r\n```\r\n\r\nAs you may have already anticipated, the output file will look like this:\r\n\r\n```\r\n....|....1....|....2....|....3....|....4\r\n   2        Felipe Coury  201-01-2007\r\n   3      Anderson Polga 8212-11-2007APR\r\n```\r\n\r\n## Examples ##\r\n\r\n### Enum conversion ###\r\n\r\nThis library has the out-of-the-box ability to export and import values to/from Java enum classes.\r\n\r\nTake the following enum as an example:\r\n\r\n```java\r\npublic enum Enum2 { One, Two, Three }\r\n```\r\n\r\nIf we have an input file containing the following lines:\r\n\r\n```\r\nOne\r\none\r\nTwo\r\nThree\r\nThree\r\n```\r\n\r\nAnd a very simple bean like this:\r\n\r\n```java\r\n@DelimitedRecord(\",\")\r\npublic class EnumType2 {\r\n    public Enum2 enumValue;\r\n}\r\n```\r\n\r\nIt would be natural to write code for loading the file:\r\n\r\n```java\r\npublic static void main(String[] args) throws IOException {\r\n    FileHelperEngine engine =\r\n        new FileHelperEngine<EnumType2>(EnumType2.class);\r\n\r\n    List<EnumType2> res =\r\n        engine.readResource(\r\n            \"/test/Good/EnumConverter2.txt\");\r\n\r\n    System.out.println(\"Size: \" + res.size());\r\n\r\n    System.out.println(\r\n        Enum2.One.equals(res.get(0).enumValue));\r\n    System.out.println(\r\n        Enum2.Two.equals(res.get(2).enumValue));\r\n    System.out.println(\r\n        Enum2.Three.equals(res.get(3).enumValue));\r\n    System.out.println(\r\n        Enum2.Three.equals(res.get(4).enumValue));\r\n}\r\n```\r\n\r\n... and that would print out:\r\n\r\n```\r\nSize: 5\r\ntrue\r\ntrue\r\ntrue\r\ntrue\r\n```\r\n\r\n### Master-detail ###\r\n\r\nSee how easy it is to handle master-detail formatted files:\r\n\r\n```\r\nALFKI|Alfreds Futterkiste|Maria Anders|Sales Representative|Obere Str. 57|Berlin|Germany\r\n10248|VINET|5|04071996|01081996|16071996|3|32.38\r\n10249|TOMSP|6|05071996|16081996|10071996|1|11.61\r\n10250|HANAR|4|08071996|05081996|12071996|2|65.83\r\n10251|VICTE|3|08071996|05081996|15071996|1|41.34\r\nANATR|Ana Trujillo Emparedados y helados|Ana Trujillo|Owner|Avda. de la Constitución 2222|México D.F.|Mexico\r\n10252|SUPRD|4|09071996|06081996|11071996|2|51.3\r\n10253|HANAR|3|10071996|24071996|16071996|2|58.17\r\n10254|CHOPS|5|11071996|08081996|23071996|2|22.98\r\nANTON|Antonio Moreno Taquería|Antonio Moreno|Owner|Mataderos  2312|México D.F.|Mexico\r\n10257|HILAA|4|16071996|13081996|22071996|3|81.91\r\n10258|ERNSH|1|17071996|14081996|23071996|1|140.51\r\nDUMON|Du monde entier|Janine Labrune|Owner|67, rue des Cinquante Otages|Nantes|France\r\n```\r\n\r\nTo indicate what records are to be considered as master as what are to be considered as detail, we use the following code:\r\n\r\n```java\r\nengine = new MasterDetailEngine<CustomersVerticalBar,\r\n    OrdersVerticalBar>(CustomersVerticalBar.class, OrdersVerticalBar.class,\r\n\r\n        new MasterDetailSelector() {\r\n\r\n            @Override\r\n            public RecordAction getRecordAction(String recordString) {\r\n                // if the first char on the record is a letter\r\n                // we'll consider it a master record and\r\n                // if not, we'll consider it a detail record\r\n                if (Character.isLetter(recordString.charAt(0)))\r\n                    return RecordAction.Master;\r\n                else\r\n                    return RecordAction.Detail;\r\n            }\r\n\r\n        });\r\n\r\nList<MasterDetails<CustomersVerticalBar, OrdersVerticalBar>> res =\r\n    (List<MasterDetails<CustomersVerticalBar, OrdersVerticalBar>>)\r\n        Common.readTest(engine, \"Good/MasterDetail1.txt\");\r\n```\r\n\r\nAnd here's how the beans are:\r\n\r\n```java\r\n@DelimitedRecord(\"|\")\r\npublic class CustomersVerticalBar\r\n    implements ComparableRecord<CustomersVerticalBar> {\r\n\r\n    public String customerID;\r\n    public String companyName;\r\n    public String contactName;\r\n    public String contactTitle;\r\n    public String address;\r\n    public String city;\r\n    public String country;\r\n\r\n    @Override\r\n    public boolean equalsRecord(CustomersVerticalBar record) {\r\n        if (this.customerID == null) {\r\n            return false;\r\n        }\r\n        return this.customerID.equals(record);\r\n    }\r\n\r\n}\r\n\r\n@DelimitedRecord(\"|\")\r\npublic class OrdersVerticalBar {\r\n\r\n    public int orderID;\r\n    public String customerID;\r\n    public int employeeID;\r\n    public Date orderDate;\r\n    public Date requiredDate;\r\n    @FieldNullValue(\"2005-1-1\")\r\n    public Date shippedDate;\r\n    public int shipVia;\r\n    public float freight;\r\n\r\n}\r\n```\r\n","google":"UA-51074431-1","note":"Don't delete this file! It's used internally to help with page regeneration."}